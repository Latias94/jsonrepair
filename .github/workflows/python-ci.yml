name: Python Package CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'python/**'
      - 'src/**'
      - 'Cargo.toml'
      - '.github/workflows/python-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'python/**'
      - 'src/**'
      - 'Cargo.toml'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test Python bindings
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13', '3.14']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: python

      - name: Install maturin and test dependencies
        run: |
          pip install maturin[patchelf] pytest

      - name: Build wheel
        run: |
          cd python
          maturin build --release

      - name: Install package (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          pip install python/target/wheels/*.whl

      - name: Install package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pip install (Get-Item python/target/wheels/*.whl)

      - name: Run tests
        run: |
          cd python
          pytest tests/ -v

      - name: Test examples
        if: runner.os != 'Windows'
        run: |
          cd python
          python examples/basic_usage.py
          python examples/options_example.py
          python examples/streaming_example.py

      - name: Test examples (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd python
          python examples/basic_usage.py
          python examples/options_example.py
          python examples/streaming_example.py

  # Type checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install mypy

      - name: Check type stubs
        run: |
          cd python
          mypy --strict python/jsonrepair/__init__.pyi

  # Lint Python code
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install ruff

      - name: Run ruff
        run: |
          cd python
          ruff check python/ tests/ examples/

  # Build wheels to ensure they can be built
  build-test:
    name: Test Wheel Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: python

      - name: Install maturin
        run: pip install maturin

      - name: Build wheel
        run: |
          cd python
          maturin build --release

      - name: List built wheels
        if: runner.os != 'Windows'
        run: ls -lh python/target/wheels/

      - name: List built wheels (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: Get-ChildItem python/target/wheels/

  # Test compatibility with json_repair
  compatibility:
    name: Test Compatibility with json_repair
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: python

      - name: Install dependencies
        run: |
          pip install maturin pytest json-repair

      - name: Build wheel
        run: |
          cd python
          maturin build --release

      - name: Install package
        run: |
          pip install python/target/wheels/*.whl

      - name: Run compatibility tests
        run: |
          cd python
          pytest tests/test_compatibility.py -v

  # Documentation check
  docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README exists
        run: |
          test -f python/README.md
          echo "✓ README.md exists"

      - name: Check README links
        run: |
          cd python
          # Check for broken internal links (basic check)
          grep -o '\[.*\](.*\.py)' README.md || true
          echo "✓ README checked"

      - name: Validate pyproject.toml
        run: |
          pip install tomli
          python -c "import tomli; tomli.load(open('python/pyproject.toml', 'rb'))"
          echo "✓ pyproject.toml is valid"

