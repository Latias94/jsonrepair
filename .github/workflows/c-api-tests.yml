name: C API Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Rust FFI tests on multiple platforms
  rust-ffi-tests:
    name: Rust FFI Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build library with c-api feature
      run: cargo build --release --features c-api

    - name: Run Rust FFI tests
      run: cargo test --features c-api --test ffi_tests -- --nocapture
    
    - name: Upload C header as artifact
      uses: actions/upload-artifact@v4
      with:
        name: c-header-${{ matrix.os }}
        path: include/jsonrepair.h

  # C native tests on Linux and macOS
  c-native-tests:
    name: C Native Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Build library with c-api feature
      run: cargo build --release --features c-api

    - name: Install GCC (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y gcc
    
    - name: Compile C tests
      working-directory: tests
      run: make
    
    - name: Run C tests
      working-directory: tests
      run: make test
    
    - name: Run C tests with Valgrind (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      working-directory: tests
      run: |
        sudo apt-get install -y valgrind
        valgrind --leak-check=full --error-exitcode=1 ./c_api_test

  # Build and test on Windows with MSVC
  windows-msvc:
    name: C API Tests (Windows MSVC)
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build library with c-api feature
      run: cargo build --release --features c-api

    - name: Run Rust FFI tests
      run: cargo test --features c-api --test ffi_tests
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Compile C test with MSVC
      working-directory: tests
      run: |
        cl /W4 /I..\include c_api_test.c /Fe:c_api_test_msvc.exe /link /LIBPATH:..\target\release jsonrepair.dll.lib
    
    - name: Run C test (MSVC)
      working-directory: tests
      run: |
        $env:PATH = "$env:PATH;..\target\release"
        .\c_api_test_msvc.exe

  # Cross-platform library build
  build-libraries:
    name: Build C Libraries (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: libjsonrepair.so
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: libjsonrepair.so
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: libjsonrepair.dylib
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: libjsonrepair.dylib
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: jsonrepair.dll
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools (Linux musl)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Build library
      run: cargo build --release --features c-api --target ${{ matrix.target }}
    
    - name: Package library (Unix)
      if: runner.os != 'Windows'
      run: |
        mkdir -p dist/lib dist/include
        cp include/jsonrepair.h dist/include/
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} dist/lib/ || true
        cp target/${{ matrix.target }}/release/libjsonrepair.a dist/lib/ || true
        tar -czf jsonrepair-${{ matrix.target }}.tar.gz -C dist .
    
    - name: Package library (Windows)
      if: runner.os == 'Windows'
      run: |
        New-Item -ItemType Directory -Force -Path dist\lib, dist\include
        Copy-Item include\jsonrepair.h dist\include\
        Copy-Item target\${{ matrix.target }}\release\jsonrepair.dll dist\lib\ -ErrorAction SilentlyContinue
        Copy-Item target\${{ matrix.target }}\release\jsonrepair.lib dist\lib\ -ErrorAction SilentlyContinue
        Copy-Item target\${{ matrix.target }}\release\jsonrepair.dll.lib dist\lib\ -ErrorAction SilentlyContinue
        Compress-Archive -Path dist\* -DestinationPath jsonrepair-${{ matrix.target }}.zip
    
    - name: Upload library artifact (Unix)
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: library-${{ matrix.target }}
        path: jsonrepair-${{ matrix.target }}.tar.gz
    
    - name: Upload library artifact (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: library-${{ matrix.target }}
        path: jsonrepair-${{ matrix.target }}.zip

  # Summary job
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [rust-ffi-tests, c-native-tests, windows-msvc]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Rust FFI Tests: ${{ needs.rust-ffi-tests.result }}"
        echo "C Native Tests: ${{ needs.c-native-tests.result }}"
        echo "Windows MSVC: ${{ needs.windows-msvc.result }}"
        
        if [ "${{ needs.rust-ffi-tests.result }}" != "success" ] || \
           [ "${{ needs.c-native-tests.result }}" != "success" ] || \
           [ "${{ needs.windows-msvc.result }}" != "success" ]; then
          echo "Some tests failed!"
          exit 1
        fi
        
        echo "All tests passed!"

