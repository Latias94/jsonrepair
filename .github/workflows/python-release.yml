name: Python Package Release

on:
  push:
    tags:
      - 'py-v[0-9]+.[0-9]+.[0-9]+'
      - 'py-v[0-9]+.[0-9]+.[0-9]+-*'  # Support pre-release tags like py-v0.1.0-beta.1

env:
  PACKAGE_NAME: jsonrepair-rs

jobs:
  # Extract version from tag
  get-version:
    name: Get Version from Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: |
          # Remove 'py-v' prefix from tag to get version
          VERSION=${GITHUB_REF#refs/tags/py-v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  # Run tests before building
  test:
    name: Test Python Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13', '3.14']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: python

      - name: Install maturin
        run: pip install maturin[patchelf] pytest

      - name: Build wheel
        run: |
          cd python
          maturin build --release

      - name: Install package
        run: |
          pip install python/target/wheels/*.whl

      - name: Run Python tests
        run: |
          cd python
          pytest tests/ -v

  # Build wheels for Linux
  linux:
    name: Build Linux Wheels
    runs-on: ubuntu-latest
    needs: [test, get-version]
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --manifest-path python/Cargo.toml
          sccache: 'true'
          manylinux: auto
          before-script-linux: |
            # Update version in pyproject.toml
            sed -i 's/version = ".*"/version = "${{ needs.get-version.outputs.version }}"/' python/pyproject.toml
            # Update version in __init__.py
            sed -i 's/__version__ = ".*"/__version__ = "${{ needs.get-version.outputs.version }}"/' python/python/jsonrepair/__init__.py

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  # Build wheels for macOS
  macos:
    name: Build macOS Wheels
    runs-on: macos-latest
    needs: [test, get-version]
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --manifest-path python/Cargo.toml
          sccache: 'true'
          before-script-macos: |
            # Update version in pyproject.toml
            sed -i '' 's/version = ".*"/version = "${{ needs.get-version.outputs.version }}"/' python/pyproject.toml
            # Update version in __init__.py
            sed -i '' 's/__version__ = ".*"/__version__ = "${{ needs.get-version.outputs.version }}"/' python/python/jsonrepair/__init__.py

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  # Build wheels for Windows
  windows:
    name: Build Windows Wheels
    runs-on: windows-latest
    needs: [test, get-version]
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Update version
        shell: pwsh
        run: |
          $version = "${{ needs.get-version.outputs.version }}"
          # Update pyproject.toml
          (Get-Content python/pyproject.toml) -replace 'version = ".*"', "version = `"$version`"" | Set-Content python/pyproject.toml
          # Update __init__.py
          (Get-Content python/python/jsonrepair/__init__.py) -replace '__version__ = ".*"', "__version__ = `"$version`"" | Set-Content python/python/jsonrepair/__init__.py

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --manifest-path python/Cargo.toml
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  # Build source distribution
  sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    needs: [test, get-version]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install maturin
        run: pip install maturin

      - name: Update version
        run: |
          # Update version in pyproject.toml
          sed -i 's/version = ".*"/version = "${{ needs.get-version.outputs.version }}"/' python/pyproject.toml
          # Update version in __init__.py
          sed -i 's/__version__ = ".*"/__version__ = "${{ needs.get-version.outputs.version }}"/' python/python/jsonrepair/__init__.py

      - name: Build sdist
        run: |
          cd python
          maturin sdist --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: python/dist

  # Publish to PyPI
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [linux, macos, windows, sdist, get-version]
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: Merge artifacts
        run: |
          mkdir -p dist
          find dist-artifacts -name '*.whl' -exec cp {} dist/ \;
          find dist-artifacts -name '*.tar.gz' -exec cp {} dist/ \;
          ls -lh dist/

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.get-version.outputs.version }}"
          TAG="py-v${VERSION}"
          
          # Create release notes
          cat > release_notes.md << EOF
          # Python Package Release v${VERSION}
          
          ## Installation
          
          \`\`\`bash
          pip install jsonrepair==${VERSION}
          \`\`\`
          
          ## What's Changed
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
          ## Wheels
          
          This release includes pre-built wheels for:
          - **Linux**: x86_64, aarch64
          - **macOS**: x86_64 (Intel), aarch64 (Apple Silicon)
          - **Windows**: x64
          - **Python versions**: 3.8, 3.9, 3.10, 3.11, 3.12, 3.13, 3.14
          
          ## Links
          
          - [PyPI Package](https://pypi.org/project/jsonrepair/${VERSION}/)
          - [Documentation](https://github.com/${{ github.repository }}/tree/main/python)
          - [Rust Crate](https://crates.io/crates/jsonrepair)
          EOF
          
          # Create release and upload wheels
          gh release create "${TAG}" \
            --title "Python Package v${VERSION}" \
            --notes-file release_notes.md \
            dist/*

  # Optional: Publish to TestPyPI for testing
  publish-testpypi:
    name: Publish to TestPyPI (Optional)
    runs-on: ubuntu-latest
    needs: [linux, macos, windows, sdist]
    if: github.event_name == 'push' && contains(github.ref, '-beta') || contains(github.ref, '-alpha') || contains(github.ref, '-rc')
    permissions:
      id-token: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: Merge artifacts
        run: |
          mkdir -p dist
          find dist-artifacts -name '*.whl' -exec cp {} dist/ \;
          find dist-artifacts -name '*.tar.gz' -exec cp {} dist/ \;

      - name: Publish to TestPyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*
        env:
          MATURIN_REPOSITORY: testpypi

